@import "variables";

@mixin content-width {
    margin: 0 2.5rem;
    width: calc(100% - 2.5rem * 2);

    @include is-desktop {
        max-width: 140rem;
        width: calc(100% - 15rem);
        margin: 0 auto;
    }
}

@mixin outer-content-margin {
    width: 2.5rem;

    @include is-desktop {
        width: 7.5rem;
    }

    @include exceeds-content-width {
        width: calc((100vw - 140rem) / 2);

    }
}

@mixin columns($x) {
    max-width: (100% / 12) * $x;
    margin: 0 auto;
}

@mixin text($element) {
    @each $breakpoint, $display-settings in $font-settings {
        @if $breakpoint != small {
            @if map-has-key($font-breakpoints, $breakpoint) {
                $font-breakpoint: map-get($font-breakpoints, $breakpoint);

                @include on-min-width($font-breakpoint) {
                    @include apply-display-settings($display-settings, $element);
                }
            }
        } @else {
            @include apply-display-settings($display-settings, $element);
        }
    }
}

@mixin apply-display-settings($display-settings, $element) {
    @if map-has-key($display-settings, $element) {
        $element-settings: map-get($display-settings, $element);

        @each $property, $value in $element-settings {
            #{$property}: $value;
        }
    }
}

@mixin square ($size) {
    width: $size;
    height: $size;
}

@mixin fit-aspect-ratio($ratio) {
    &::before {
        content: "";
        display: block;
        padding-bottom: $ratio;
    }
}

@mixin transition($properties, $duration) {
    transition-property: join($properties, (), "comma");
    transition-duration: $duration;
    will-change: join($properties, (), "comma");
}

@mixin hover($fallback: false) {
    @media (hover: hover) {
        &:hover {
            @content;
        }
    }

    @if $fallback == true {
        @media (hover: none) {
            @content;
        }
    }
}

@mixin player-controls-hover($init, $end) {
    display: flex;
    @include transition(color, .2s);

    .icon-#{$init},
    .icon-#{$end} {
        @include square(4rem);
        @include transition(transform, .2s);
    }

    @include hover {
        color: $primary;

        .icon-#{$init},
        .icon-#{$end} {
            transform: scale(1.1);
        }
    }

    &:active {
        color: $primary;
    }
}

@mixin rotate-html {
    transform: rotate(-90deg);
    transform-origin: left top;
    width: 100vh;
    height: 100vw;
    overflow-x: hidden;
    position: absolute;
    top: 100%;
    left: 0;
}

//region Media Queries
@mixin on-landscape {
    @media screen and (max-width: 767px) and (orientation: portrait) {
        @content;
    }

    @media screen and (hover: none) and (orientation: portrait) {
        @content;
    }
}

@mixin on-min-width ($min-width) {
    @media screen and (min-width: $min-width) {
        @content;
    }
}

@mixin on-max-width ($max-width) {
    @media screen and (max-width: $max-width) {
        @content;
    }
}

@mixin is-tablet {
    @include on-min-width($breakpoint-tablet) {
        @content;
    }
}

@mixin is-desktop {
    @include on-min-width($breakpoint-desktop) {
        @content;
    }
}

@mixin is-desktop-large {
    @include on-min-width($breakpoint-desktop-large) {
        @content;
    }
}

@mixin is-desktop-extra-large {
    @include on-min-width($breakpoint-desktop-extra-large) {
        @content;
    }
}

@mixin exceeds-content-width {
    @include on-min-width(1550px) {
        @content;
    }
}
//endregion Media Queries
